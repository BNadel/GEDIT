willcox.test
wilcox.test()
?wilcox.test()
wilcox.test(x=c(1,2,3,4),y=c(5,6,7,8))
library(EnsDb.HSapiens.v86)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v86")
library(EnsDb.Hsapiens.v86)
hsens=EnsDb.Hsapiens.v86
my.symbols <- c("ANKRD62P1-PARP4P3")
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
MySymbols = read.table("../Desktop/Benchmarking/Workspace/Data/SignatureLists/GeneListToConvert.txt")
my.symbols = as.list(MySymbols)
View(my.symbols)
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
hsens
View(hsens)
?hsens
?EnsDb.HSapiens.v86
??EnsDb.HSapiens.v86
hsens[tables]
hsens[2]
hsens[[2]]
hsens.tables
hsens.tables()
hsens@tables[["entrezgene"]]
hsens@tables["entrezgene"]
hsens@tables[["entrezgene"]]
listTables(EnsDb.Hsapiens.v86)
genes()
genes(hens)
genes(hsens)
genes(hsens, columns = c(listColumns(hsens,"gene"), "entresid"))
genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
output = genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
View(output)
View(output)
output@seqnames
output@seqnames@values
genes(hsens)
output = genes(hsens)
View(output)
output = genes(hsens, return.type = "data.frame")
View(output)
convTable = hsens[c(gene_name,entrezid)]
convTable = hsens[c(gene_name,entrezid),]
convTable = hsens[c("gene_name","entrezid"),]
convTable = hsens[c("gene_name","entrezid")]
output[2]
output[2,10]
output[2,11]
output[2,9]
output[c(2,9)]
output[c(9,10)]
convTable = output[c(9,10)]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
View(convTable)
convTable[2]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
convTable[3] = unlist(convTable[2])
typeof(convTable[2])
unlist(convTable[2])
UNlisted = unlist(convTable[2])
row.names(convTable)
View(convTable)
as.matrix(convTable)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt"
)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt", sep = "\t")
install.packages(ComICS)
BiocLite("ComICS")
install.packages("ComICS")
dcq
library(ComICS
)
library(ComICS)
dcq()
?dcq
load("../Desktop/EPIC-master/data/TRef.rda")
View(TRef)
TRef
install.packages("devtools")
?install_github
?install_github()
library(devtools)
?install_github()
setwd("../Desktop/GEDIT/ToolsComparison/1_PrepareData/Xcel/")
setwd("1_Transposed/")
Ascites = read.table("../0_RawOutput/xCell_Ascites_default.tsv", header = TRUE, row.names = 1)
Ascites = read.table("../0_RawOutput/xCell_Ascites_default.tsv", header = TRUE, row.names = 1, sep = "\t")
Hoek = read.table("../0_RawOutput/xCell_Hoek-Mixtures_default.tsv", header = TRUE, row.names = 1, sep = "\t")
Racle-TPM = read.table("../0_RawOutput/xCell_Racle-TPM_default.tsv", header = TRUE, row.names = 1, sep = "\t")
Racle-TPM = read.table("../0_RawOutput/xCell_Racle-TPM.tsv", header = TRUE, row.names = 1, sep = "\t")
RacleTPM = read.table("../0_RawOutput/xCell_Racle-TPM.tsv", header = TRUE, row.names = 1, sep = "\t")
RaclePFKM = read.table("../0_RawOutput/xCell_Racle-FPKM.tsv", header = TRUE, row.names = 1, sep = "\t")
CellMix = read.table("../0_RawOutput/xCell_SampleMix_default.tsv", header = TRUE, row.names = 1, sep = "\t")
write.table(t(Ascites), file = "xCell_Ascites_default.tsv", sep = "\t", quote = FALSE)
write.table(t(Hoek), file = "xCell_Hoek_default.tsv", sep = "\t", quote = FALSE)
write.table(t(RacleFPKM), file = "xCell_RacleFPKM_default.tsv", sep = "\t", quote = FALSE)
write.table(t(RaclePFKM), file = "xCell_RacleFPKM_default.tsv", sep = "\t", quote = FALSE)
save.image("C:/Users/brian/OneDrive/Desktop/GEDIT/ToolsComparison/1_PrepareData/Xcel/1_Transposed/Flip.RData")
